{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\emrek\\\\Documents\\\\Crosstech\\\\WebSocket\\\\react-socketio-chat-app\\\\client\\\\src\\\\App.tsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport \"./App.css\";\nimport { HubConnectionBuilder } from \"@microsoft/signalr\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst URL = \"http://localhost:5000/chat\";\nexport const App = () => {\n  _s();\n\n  const [hubConnetion, setHubConnection] = React.useState();\n  const [text, setText] = React.useState(\"\");\n  const [messageList, setMessageList] = React.useState([]);\n  React.useEffect(() => {\n    createHubConnection();\n  }, []);\n  React.useEffect(() => {\n    if (hubConnetion) {\n      hubConnetion.on(\"ReceiveMessage\", message => {\n        setMessageList([...messageList, message]);\n      });\n    }\n  }, [hubConnetion]);\n\n  const createHubConnection = async () => {\n    const hubConnection = new HubConnectionBuilder().withUrl(URL).build();\n\n    try {\n      await hubConnection.start();\n      console.log(\"Bağlandı.\");\n    } catch (error) {\n      console.log(\"hata:\", error);\n    }\n\n    setHubConnection(hubConnection);\n  };\n\n  const sendMessage = async () => {\n    console.log(\"hubconnection\", hubConnetion);\n\n    if (hubConnetion) {\n      await hubConnetion.invoke(\"SendMessage\", text);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        value: text,\n        onChange: e => setText(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: sendMessage,\n        children: \"Send Message\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Mesaj List\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: messageList.map((message, index) => {\n            return /*#__PURE__*/_jsxDEV(\"li\", {\n              children: message\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 53,\n              columnNumber: 22\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"DHpga90DEgruSBaVznKP7AzxO+E=\");\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/emrek/Documents/Crosstech/WebSocket/react-socketio-chat-app/client/src/App.tsx"],"names":["React","HubConnectionBuilder","URL","App","hubConnetion","setHubConnection","useState","text","setText","messageList","setMessageList","useEffect","createHubConnection","on","message","hubConnection","withUrl","build","start","console","log","error","sendMessage","invoke","e","target","value","map","index"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,WAAP;AACA,SAAwBC,oBAAxB,QAAoD,oBAApD;;AAEA,MAAMC,GAAG,GAAG,4BAAZ;AAEA,OAAO,MAAMC,GAAG,GAAG,MAAM;AAAA;;AACvB,QAAM,CAACC,YAAD,EAAeC,gBAAf,IAAmCL,KAAK,CAACM,QAAN,EAAzC;AACA,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBR,KAAK,CAACM,QAAN,CAAuB,EAAvB,CAAxB;AACA,QAAM,CAACG,WAAD,EAAcC,cAAd,IAAgCV,KAAK,CAACM,QAAN,CAAyB,EAAzB,CAAtC;AAEAN,EAAAA,KAAK,CAACW,SAAN,CAAgB,MAAM;AACpBC,IAAAA,mBAAmB;AACpB,GAFD,EAEG,EAFH;AAIAZ,EAAAA,KAAK,CAACW,SAAN,CAAgB,MAAM;AACpB,QAAIP,YAAJ,EAAkB;AAChBA,MAAAA,YAAY,CAACS,EAAb,CAAgB,gBAAhB,EAAmCC,OAAD,IAAa;AAC7CJ,QAAAA,cAAc,CAAC,CAAC,GAAGD,WAAJ,EAAiBK,OAAjB,CAAD,CAAd;AACD,OAFD;AAGD;AACF,GAND,EAMG,CAACV,YAAD,CANH;;AAQA,QAAMQ,mBAAmB,GAAG,YAAY;AACtC,UAAMG,aAAa,GAAG,IAAId,oBAAJ,GAA2Be,OAA3B,CAAmCd,GAAnC,EAAwCe,KAAxC,EAAtB;;AAEA,QAAI;AACF,YAAMF,aAAa,CAACG,KAAd,EAAN;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACD,KAHD,CAGE,OAAOC,KAAP,EAAc;AACdF,MAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBC,KAArB;AACD;;AAEDhB,IAAAA,gBAAgB,CAACU,aAAD,CAAhB;AACD,GAXD;;AAaA,QAAMO,WAAW,GAAG,YAAY;AAC9BH,IAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BhB,YAA7B;;AACA,QAAIA,YAAJ,EAAkB;AAChB,YAAMA,YAAY,CAACmB,MAAb,CAAoB,aAApB,EAAmChB,IAAnC,CAAN;AACD;AACF,GALD;;AAOA,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,2BACE;AAAQ,MAAA,SAAS,EAAC,YAAlB;AAAA,8BACE;AAAO,QAAA,KAAK,EAAEA,IAAd;AAAoB,QAAA,QAAQ,EAAGiB,CAAD,IAAOhB,OAAO,CAACgB,CAAC,CAACC,MAAF,CAASC,KAAV;AAA5C;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAQ,QAAA,OAAO,EAAEJ,WAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF,eAGE;AAAA,gCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AAAA,oBACGb,WAAW,CAACkB,GAAZ,CAAgB,CAACb,OAAD,EAAkBc,KAAlB,KAAoC;AACnD,gCAAO;AAAA,wBAAiBd;AAAjB,eAASc,KAAT;AAAA;AAAA;AAAA;AAAA,oBAAP;AACD,WAFA;AADH;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,cAHF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAgBD,CArDM;;GAAMzB,G;;KAAAA,G","sourcesContent":["import React from \"react\";\r\nimport \"./App.css\";\r\nimport { HubConnection, HubConnectionBuilder } from \"@microsoft/signalr\";\r\n\r\nconst URL = \"http://localhost:5000/chat\";\r\n\r\nexport const App = () => {\r\n  const [hubConnetion, setHubConnection] = React.useState<HubConnection>();\r\n  const [text, setText] = React.useState<string>(\"\");\r\n  const [messageList, setMessageList] = React.useState<string[]>([]);\r\n\r\n  React.useEffect(() => {\r\n    createHubConnection();\r\n  }, []);\r\n\r\n  React.useEffect(() => {\r\n    if (hubConnetion) {\r\n      hubConnetion.on(\"ReceiveMessage\", (message) => {\r\n        setMessageList([...messageList, message]);\r\n      });\r\n    }\r\n  }, [hubConnetion]);\r\n\r\n  const createHubConnection = async () => {\r\n    const hubConnection = new HubConnectionBuilder().withUrl(URL).build();\r\n\r\n    try {\r\n      await hubConnection.start();\r\n      console.log(\"Bağlandı.\");\r\n    } catch (error) {\r\n      console.log(\"hata:\", error);\r\n    }\r\n\r\n    setHubConnection(hubConnection);\r\n  };\r\n\r\n  const sendMessage = async () => {\r\n    console.log(\"hubconnection\", hubConnetion)\r\n    if (hubConnetion) {\r\n      await hubConnetion.invoke(\"SendMessage\", text);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <input value={text} onChange={(e) => setText(e.target.value)} />\r\n        <button onClick={sendMessage}>Send Message</button>\r\n        <div>\r\n          <h2>Mesaj List</h2>\r\n          <ul>\r\n            {messageList.map((message: string, index: number) => {\r\n              return <li key={index}>{message}</li>;\r\n            })}\r\n          </ul>\r\n        </div>\r\n      </header>\r\n    </div>\r\n  );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}