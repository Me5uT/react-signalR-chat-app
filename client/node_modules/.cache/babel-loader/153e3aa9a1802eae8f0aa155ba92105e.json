{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\emrek\\\\Documents\\\\Crosstech\\\\WebSocket\\\\react-socketio-chat-app\\\\client\\\\src\\\\App.tsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport \"./App.css\";\nimport { HubConnectionBuilder } from \"@microsoft/signalr\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst URL = \"http://localhost:5000/chat\";\nexport const App = () => {\n  _s();\n\n  const [hubConnetion, setHubConnection] = React.useState();\n  const [text, setText] = React.useState(\"\");\n  const [messageList, setMessageList] = React.useState([]);\n  React.useEffect(() => {\n    createHubConnection();\n  }, []);\n  React.useEffect(() => {\n    if (hubConnetion) {\n      hubConnetion.on(\"ReceiveMessage\", message => {\n        setMessageList([...messageList, message]);\n        console.log(\"message\", message);\n      });\n    }\n  }, [hubConnetion]);\n\n  const createHubConnection = async () => {\n    const hubConnection = new HubConnectionBuilder().withUrl(URL).build();\n\n    try {\n      await hubConnection.start();\n      console.log(\"Bağlandı.\");\n    } catch (error) {\n      console.log(\"hata:\", error);\n    }\n\n    setHubConnection(hubConnection);\n  };\n\n  const sendMessage = async () => {\n    if (hubConnetion) {\n      await hubConnetion.invoke(\"SendMessage\", text);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-window\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-header\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Live Chat\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-body\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message-container\",\n          children: messageList.map(messageContent => {\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"message\" // id={username === messageContent.author ? \"you\" : \"other\"}\n              ,\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"message-content\",\n                  children: /*#__PURE__*/_jsxDEV(\"p\", {\n                    children: messageContent\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 60,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 59,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 58,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 54,\n              columnNumber: 17\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-footer\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: text,\n          placeholder: \"...\",\n          onChange: e => setText(e.target.value),\n          onKeyPress: event => {\n            event.key === \"Enter\" && sendMessage();\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: sendMessage,\n          children: \"\\u25BA\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"DHpga90DEgruSBaVznKP7AzxO+E=\");\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/emrek/Documents/Crosstech/WebSocket/react-socketio-chat-app/client/src/App.tsx"],"names":["React","HubConnectionBuilder","URL","App","hubConnetion","setHubConnection","useState","text","setText","messageList","setMessageList","useEffect","createHubConnection","on","message","console","log","hubConnection","withUrl","build","start","error","sendMessage","invoke","map","messageContent","e","target","value","event","key"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport \"./App.css\";\r\nimport { HubConnection, HubConnectionBuilder } from \"@microsoft/signalr\";\r\n\r\nconst URL = \"http://localhost:5000/chat\";\r\n\r\nexport const App = () => {\r\n  const [hubConnetion, setHubConnection] = React.useState<HubConnection>();\r\n  const [text, setText] = React.useState<string>(\"\");\r\n  const [messageList, setMessageList] = React.useState<string[]>([]);\r\n\r\n  React.useEffect(() => {\r\n    createHubConnection();\r\n  }, []);\r\n\r\n  React.useEffect(() => {\r\n    if (hubConnetion) {\r\n      hubConnetion.on(\"ReceiveMessage\", (message) => {\r\n        setMessageList([...messageList, message]);\r\n        console.log(\"message\", message);\r\n      });\r\n    }\r\n  }, [hubConnetion]);\r\n\r\n  const createHubConnection = async () => {\r\n    const hubConnection = new HubConnectionBuilder().withUrl(URL).build();\r\n\r\n    try {\r\n      await hubConnection.start();\r\n      console.log(\"Bağlandı.\");\r\n    } catch (error) {\r\n      console.log(\"hata:\", error);\r\n    }\r\n\r\n    setHubConnection(hubConnection);\r\n  };\r\n\r\n  const sendMessage = async () => {\r\n    if (hubConnetion) {\r\n      await hubConnetion.invoke(\"SendMessage\", text);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <div className=\"chat-window\">\r\n        <div className=\"chat-header\">\r\n          <p>Live Chat</p>\r\n        </div>\r\n        <div className=\"chat-body\">\r\n          <div className=\"message-container\">\r\n            {messageList.map((messageContent) => {\r\n              return (\r\n                <div\r\n                  className=\"message\"\r\n                  // id={username === messageContent.author ? \"you\" : \"other\"}\r\n                >\r\n                  <div>\r\n                    <div className=\"message-content\">\r\n                      <p>{messageContent}</p>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              );\r\n            })}\r\n          </div>\r\n        </div>\r\n        <div className=\"chat-footer\">\r\n          <input\r\n            type=\"text\"\r\n            value={text}\r\n            placeholder=\"...\"\r\n            onChange={(e) => setText(e.target.value)}\r\n            onKeyPress={(event) => {\r\n              event.key === \"Enter\" && sendMessage();\r\n            }}\r\n          />\r\n          <button onClick={sendMessage}>&#9658;</button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}